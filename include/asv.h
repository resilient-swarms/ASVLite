#ifndef ASV_H
#define ASV_H

#include <stdbool.h>
#include "constants.h"
#include "geometry.h"
#include "wave.h"

/**
 * Struct to hold specification of the vehicle. 
 * Coordinate system: Body-centric frame. The origin of the frame is on the
 * waterplane at the aft-centre.
 */
struct Asv_specification
{
  double L_wl;      //!< Input variable. Length waterline in m.
  double B_wl;      //!< Input variable. Breadth waterline in m.
  double D;         //!< Input variable. Depth of the ASV in m.
  double T;         //!< Input variable. Draught of the ASV in m.
  double max_speed; //!< Input variable. Maximum operational speed of the ASV in 
                    //!< m/s.
  double disp;   //!< Input variable. Displacement of the ASV in m3.
  double r_roll; //!< Input variable. roll radius of gyration.
  double r_pitch;//!< Input variable. pitch radius of gyration.
  double r_yaw;  //!< Input variable. yaw radius of gyration.
  union Coordinates_3D cog; //!< Input variable. Centre of gravity in body-fixed 
                            //!< frame.
};

/**
 * A propeller for an asv. 
 */
struct Propeller;

/**
 * An ASV.
 * An instance of Asv should only be created by calling 
 * the method asv_new(). This function allocates and 
 * initialises a block of memory on the stack, and therefore 
 * all calls to asv_new() should be paired with a call to 
 * asv_delete() to avoid memory leaks. All function calls 
 * may not result in a successful operation due to error. 
 * To find the status of an operation, call the function 
 * asv_get_error_msg(), which returns a null pointer if 
 * the operation was successful; else returns an error message. 
 */
struct Asv;

/**
 * Create and initialise a Propeller.
 * @param position of the propeller in ASV's body-fixed frame.
 * @return pointer to the initialised object if the operation was successful; else, returns a null pointer.
 */
struct Propeller* propeller_new(const union Coordinates_3D position);

/**
 * Free memory allocated for the propeller.
 * @param propeller is a non-null pointer to an instance of Propeller to be deallocated.
 */
void propeller_delete(struct Propeller* propeller);

/**
 * Returns error message related to the last function called for the instance of Propeller.
 * @param wave is a non-null pointer to an instance of Propeller for which the error message is to be fetched.
 */
const char* propeller_get_error_msg(const struct Propeller* propeller);

/**
 * Set the orientation and magnitude of propeller thrust. 
 * @param propeller is a non-null pointer to an instance of Propeller for which the thrust is to be set.
 * @param orientation of the thrust vector in body-fixed frame.
 * @param magnitude of the thrust.
 */
void propeller_set_thrust(struct Propeller* propeller, const union Coordinates_3D orientation, double magnitude); 

/**
 * Create and initialise an asv.
 * @param specification of the ASV. 
 * @param wave is the irregular sea surface for the asv. 
 * @return pointer to the initialised object if the operation was successful; else, returns a null pointer.
 */
struct Asv* asv_new(const struct Asv_specification specification, const struct Wave* wave);

/**
 * Free memory allocated for the asv.
 * @param asv is a non-null pointer to an instance of Asv to be deallocated.
 */
void asv_delete(struct Asv* asv);

/**
 * Returns error message related to the last function called for the instance of Asv.
 * @param wave is a non-null pointer to an instance of Asv for which the error message is to be fetched.
 */
const char* asv_get_error_msg(const struct Asv* asv);

/**
 * Set the propellers for the asv.
 * @param asv is a non-null pointer to an instance of Asv for which the propellers are to be set.
 * @param propellers is the array of propellers for the asv.
 * @param cout_propellers is the size of propellers array.
 */
void asv_set_propellers(struct Asv* asv, struct Propeller* propellers, int cout_propellers);

/**
 * Function to modify the current sea state to a new sea state.
 * @param asv is a non-null pointer to an instance of Asv for which a new irregular wave is to be set.
 * @param wave is a non-null pointer for the new instance of irregular wave. 
 * If memory is to  be cleaned, call wave_delete() on the pointer to the old irregular wave instance.   
 */
void asv_set_sea_state(struct Asv* asv, const struct Wave* wave);

/**
 * Function to set the position and attitude of the ASV for the given time step.
 * @param asv is a non-null pointer to an instance of Asv for which the dynamics is to be computed.
 * @param time for which the dynamics is to be computed. Time is measured in seconds from start of simulation.
 */
void asv_compute_dynamics(struct Asv* asv, double time);

/**
 * Similar to function asv_compute_dynamics but should be used only for a wave glider. 
 * The function sets the position and attitude of the wave glider for the given time step, 
 * and also computes the wave thrust force generated by the underwater glider.
 * @param asv is a non-null pointer to an instance of Asv for which the dynamics is to be computed.
 * @param rudder_angle is the angle of the rudder with respect to X axis of the ASV. 
 * Rudder angle must within (-PI/2, PI/2). Angle is positive when the vehicle has to turn to right (ie. aft end of the rudder points to starboard side). 
 * @param time for which the dynamics is to be computed. Time is measured in seconds from start of simulation.
 */
void wave_glider_compute_dynamics(struct Asv* asv, double rudder_angle, double time);

#endif // ASV_H
